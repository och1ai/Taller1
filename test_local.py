#!/usr/bin/env python3
"""
Script para ejecutar pruebas del API de usuarios en entorno LOCAL.
Configura autom√°ticamente la URL base para apuntar a localhost:8000.
"""

import os
import sys
import subprocess

def main():
    print("üè† INICIANDO PRUEBAS EN ENTORNO LOCAL")
    print("=" * 60)
    print("Configuraci√≥n:")
    print("‚Ä¢ Entorno: LOCAL (Docker)")
    print("‚Ä¢ URL Base: http://localhost:8000")
    print("‚Ä¢ Documentaci√≥n: http://localhost:8000/docs")
    print("=" * 60)
    print()
    
    # Verificar que Docker est√© ejecut√°ndose
    print("Verificando estado de los contenedores Docker...")
    try:
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True, check=True)
        if 'user_service' not in result.stdout:
            print("‚ö†Ô∏è  ADVERTENCIA: No se encontr√≥ el contenedor 'user_service' ejecut√°ndose.")
            print("   Ejecuta primero: ./start_service.sh (Linux/macOS) o start_service.bat (Windows)")
            print("   O manualmente: docker-compose up -d")
            print()
        else:
            print("‚úÖ Contenedores Docker ejecut√°ndose correctamente")
            print()
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è  ADVERTENCIA: No se pudo verificar el estado de Docker.")
        print("   Aseg√∫rate de que Docker est√© instalado y ejecut√°ndose.")
        print()
    
    # Configurar variables de entorno para el test
    os.environ['API_BASE_URL'] = 'http://localhost:8000'
    os.environ['TEST_ENVIRONMENT'] = 'LOCAL'
    
    print("üß™ Ejecutando suite completa de pruebas...")
    print("-" * 60)
    
    try:
        # Ejecutar el script de pruebas original
        result = subprocess.run([sys.executable, 'test_api.py'], check=True)
        
        print()
        print("=" * 60)
        print("‚úÖ PRUEBAS LOCALES COMPLETADAS EXITOSAMENTE")
        print("=" * 60)
        print("üìä Resumen:")
        print("‚Ä¢ Todas las validaciones pasaron")
        print("‚Ä¢ Autenticaci√≥n y autorizaci√≥n funcionando")
        print("‚Ä¢ CRUD completo operativo")
        print("‚Ä¢ Soft deletes funcionando")
        print("‚Ä¢ Logs de auditor√≠a operativos")
        print()
        print("üîó Enlaces √∫tiles:")
        print("‚Ä¢ API: http://localhost:8000")
        print("‚Ä¢ Docs: http://localhost:8000/docs")
        print("‚Ä¢ Redoc: http://localhost:8000/redoc")
        
    except subprocess.CalledProcessError as e:
        print()
        print("=" * 60)
        print("‚ùå ERROR EN LAS PRUEBAS LOCALES")
        print("=" * 60)
        print("Las pruebas fallaron. Revisa la salida anterior para m√°s detalles.")
        print()
        print("üîç Pasos para solucionar problemas:")
        print("1. Verifica que Docker est√© ejecut√°ndose")
        print("2. Ejecuta: docker-compose up -d")
        print("3. Espera unos segundos para que la DB se inicialice")
        print("4. Verifica que http://localhost:8000/docs est√© accesible")
        
        sys.exit(1)
    
    except KeyboardInterrupt:
        print()
        print("‚èπÔ∏è  Pruebas interrumpidas por el usuario")
        sys.exit(1)

if __name__ == "__main__":
    main()