#!/usr/bin/env python3
"""
Script para ejecutar pruebas del API de usuarios en entorno de PRODUCCI√ìN.
Lee la configuraci√≥n desde el archivo .env.test para obtener la URL del servicio.
"""

import os
import sys
import subprocess
from pathlib import Path

def load_env_file(env_file_path='.env.test'):
    """Carga variables de entorno desde un archivo .env"""
    env_file = Path(env_file_path)
    
    if not env_file.exists():
        return False
    
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()
    
    return True

def main():
    print("‚òÅÔ∏è  INICIANDO PRUEBAS EN ENTORNO DE PRODUCCI√ìN")
    print("=" * 60)
    
    # Cargar configuraci√≥n desde .env.test
    if not load_env_file('.env.test'):
        print("‚ùå ERROR: No se encontr√≥ el archivo .env.test")
        print()
        print("Crea el archivo .env.test con el siguiente contenido:")
        print("---")
        print("PRODUCTION_API_URL=https://tu-servicio.onrender.com")
        print("REQUEST_TIMEOUT=30")
        print("LOG_LEVEL=INFO")
        print("---")
        print()
        sys.exit(1)
    
    # Obtener URL de producci√≥n
    production_url = os.environ.get('PRODUCTION_API_URL')
    if not production_url:
        print("‚ùå ERROR: PRODUCTION_API_URL no est√° definida en .env.test")
        print()
        print("A√±ade la l√≠nea en .env.test:")
        print("PRODUCTION_API_URL=https://tu-servicio.onrender.com")
        print()
        sys.exit(1)
    
    # Mostrar configuraci√≥n
    print("Configuraci√≥n:")
    print(f"‚Ä¢ Entorno: PRODUCCI√ìN (Cloud)")
    print(f"‚Ä¢ URL Base: {production_url}")
    print(f"‚Ä¢ Timeout: {os.environ.get('REQUEST_TIMEOUT', '30')} segundos")
    print(f"‚Ä¢ Log Level: {os.environ.get('LOG_LEVEL', 'INFO')}")
    print("=" * 60)
    print()
    
    # Verificar conectividad
    print("Verificando conectividad con el servicio...")
    try:
        import requests
        
        # Test b√°sico de conectividad
        response = requests.get(
            f"{production_url}/docs", 
            timeout=int(os.environ.get('REQUEST_TIMEOUT', '30'))
        )
        
        if response.status_code == 200:
            print("‚úÖ Servicio accesible - Swagger UI disponible")
        else:
            print(f"‚ö†Ô∏è  ADVERTENCIA: Swagger UI no accesible (c√≥digo: {response.status_code})")
            print("   Esto puede ser normal si la documentaci√≥n est√° deshabilitada en producci√≥n")
        
        print()
        
    except ImportError:
        print("‚ö†Ô∏è  ADVERTENCIA: requests no est√° instalado. Saltando verificaci√≥n de conectividad.")
        print("   Instala con: pip install requests")
        print()
    except Exception as e:
        print(f"‚ö†Ô∏è  ADVERTENCIA: No se pudo verificar conectividad: {str(e)}")
        print("   Las pruebas pueden fallar si el servicio no est√° disponible.")
        print()
    
    # Configurar variables de entorno para el test
    os.environ['API_BASE_URL'] = production_url
    os.environ['TEST_ENVIRONMENT'] = 'PRODUCTION'
    
    print("üß™ Ejecutando suite completa de pruebas contra PRODUCCI√ìN...")
    print("-" * 60)
    print("‚ö†Ô∏è  NOTA: Las pruebas crear√°n usuarios temporales que ser√°n eliminados autom√°ticamente")
    print()
    
    try:
        # Ejecutar el script de pruebas original
        result = subprocess.run([sys.executable, 'test_api.py'], check=True)
        
        print()
        print("=" * 60)
        print("‚úÖ PRUEBAS DE PRODUCCI√ìN COMPLETADAS EXITOSAMENTE")
        print("=" * 60)
        print("üìä Resumen:")
        print("‚Ä¢ Todas las validaciones pasaron")
        print("‚Ä¢ Autenticaci√≥n y autorizaci√≥n funcionando")
        print("‚Ä¢ CRUD completo operativo")
        print("‚Ä¢ Soft deletes funcionando")
        print("‚Ä¢ Logs de auditor√≠a operativos")
        print("‚Ä¢ Servicio en producci√≥n estable")
        print()
        print("üîó Enlaces √∫tiles:")
        print(f"‚Ä¢ API: {production_url}")
        print(f"‚Ä¢ Docs: {production_url}/docs")
        print(f"‚Ä¢ Redoc: {production_url}/redoc")
        
    except subprocess.CalledProcessError as e:
        print()
        print("=" * 60)
        print("‚ùå ERROR EN LAS PRUEBAS DE PRODUCCI√ìN")
        print("=" * 60)
        print("Las pruebas fallaron. Revisa la salida anterior para m√°s detalles.")
        print()
        print("üîç Pasos para solucionar problemas:")
        print("1. Verifica que la URL en .env.test sea correcta")
        print("2. Confirma que el servicio est√© desplegado y ejecut√°ndose")
        print("3. Revisa los logs del servicio en tu plataforma de hosting")
        print("4. Verifica la conectividad de red")
        print(f"5. Prueba acceder manualmente a: {production_url}/docs")
        
        sys.exit(1)
    
    except KeyboardInterrupt:
        print()
        print("‚èπÔ∏è  Pruebas interrumpidas por el usuario")
        sys.exit(1)

if __name__ == "__main__":
    main()